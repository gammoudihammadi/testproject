using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Newrest.Winrest.FunctionalTests.PageObjects.Shared
{
    public class ExploitTextFiles
    {
        public static double[] VerifySAGEFileContent(string fileName, string parametre, string decimalSeparator)
        {
            string line;
            double montant = 0;
            double sommeTaxes = 0;
            int compteurLignes = 0;
            double[] resultat = new double[2];

            string montantGrp1 = "([^\\;]*)";
            string sommeTaxeGrp2 = "([^\\;]*)";
            string generalGrp3 = "([^\\;]*)";

            CultureInfo ci = decimalSeparator.Equals(",") ? ci = new CultureInfo("fr-FR") : ci = new CultureInfo("en-US");

            // Read the file and display it line by line.  
            StreamReader file = new StreamReader(fileName);

            Regex r = new Regex("^(?:[^\\;]*\\;){8}" + montantGrp1 + "\\;" + sommeTaxeGrp2 + "\\;(?:[^\\;]*\\;){3}" + generalGrp3, RegexOptions.IgnoreCase | RegexOptions.Singleline);


            while ((line = file.ReadLine()) != null)
            {
                compteurLignes++;
                Match m = r.Match(line);

                try
                {
                    var test = m.Groups[3].ToString();
                    var test1 = m.Groups[1].ToString();
                    var test2 = m.Groups[2].ToString();
                    if (m.Success && m.Groups[3].ToString().Equals(parametre))
                    {
                        montant += double.Parse(m.Groups[1].ToString(), ci);
                        sommeTaxes += double.Parse(m.Groups[2].ToString(), ci);
                    }
                }
                catch
                {
                    throw new Exception("Le fichier SAGE ne correspond pas au format attendu.");
                }
            }
            file.Close();

            if(compteurLignes == 0)
            {
                throw new Exception("Le fichier SAGE n'a pas de contenu.");
            }

            resultat[0] = montant;
            resultat[1] = sommeTaxes;

            return resultat;
        }

        public static List<string> VerifySAGEFileIntegrationDate(string fileName, string parametre)
        {
            string line;
            int compteurLignes = 0;
            HashSet<string> dates = new HashSet<string>();

            string generalGrp1 = "([^\\;]*)";
            string dateGrp2 = "([^\\;]*)";

            // Read the file and display it line by line.  
            StreamReader file = new StreamReader(fileName);

            Regex r = new Regex("^(?:[^\\;]*\\;){13}" + generalGrp1 + "\\;(?:[^\\;]*\\;){6}" + dateGrp2, RegexOptions.IgnoreCase | RegexOptions.Singleline);

            while ((line = file.ReadLine()) != null)
            {
                compteurLignes++;
                Match m = r.Match(line);

                try
                {
                    if (m.Success && m.Groups[1].ToString().Equals(parametre))
                    {
                        dates.Add(m.Groups[2].ToString());
                    }
                }
                catch
                {
                    throw new Exception("Le fichier SAGE ne correspond pas au format attendu.");
                }
            }
            file.Close();

            if (compteurLignes == 0)
            {
                throw new Exception("Le fichier SAGE n'a pas de contenu.");
            }

            return new List<string>(dates);
        }
    }
}
